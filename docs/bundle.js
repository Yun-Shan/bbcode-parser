(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var n,r=function(){function t(){}return t.prototype.getArg=function(t,n){},t}(),e=(n=function(t,r){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(t,r)},function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}n(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}),o=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.tagName=function(){return"b"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},n}(r),u=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),a=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return u(n,t),n.prototype.tagName=function(){return"i"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},n}(r),i=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.tagName=function(){return"color"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return r?n?(n.match(/^[0-9a-fA-F]{6}$/)&&(n="#"+n),'<span style="color:'+n+'">'+r+"</span>"):r:""},n}(r),c=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),s=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return c(n,t),n.prototype.tagName=function(){return"mask"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return r?'<div class="mask"><span class="heimu" title="你知道的太多了">'+r+"</span></div>":""},n}(r),l=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),f=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return l(n,t),n.prototype.tagName=function(){return"collapse"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return n||(n="点击展开"),0===n.indexOf("title=")&&(n=n.substring(6)),"<div><details><summary><b>"+n+"</b></summary><p>"+r+"</p></details></div>"},n}(r),_=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])})(n,r)};return function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return _(n,t),n.prototype.tagName=function(){return"dice"},n.prototype.tagAliases=function(){return[]},n.prototype.handle=function(t,n,r){return r?!!r.match(/^((\d+)|(\d*d\d+))(\+((\d+)|(\d*d\d+)))*$/)&&'<div class="dice">假装有骰娘：'+r+"="+Math.round(200*Math.random())+"</div>":""},n}(r),T=new(function(){function t(){this.TAG_HANDLER_MAP={},this.TAG_ALIASES_MAP={}}return t.prototype.transformAsIs=function(t,n,r){return"["+(n?t+"="+n:t)+"]"+r+"[/"+t+"]"},t.prototype.transformTag=function(t,n,r){null==n&&(n=""),t=t.substring(1);var e=this.TAG_ALIASES_MAP[t];if(!e)return this.transformAsIs(t,r,n);var o=this.TAG_HANDLER_MAP[e];if(o){var u=o.handle(e,r,n);if("string"==typeof u)return u}return this.transformAsIs(e,r,n)},t.prototype.filterXSS=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")},t.prototype.registerTagHandler=function(t){this.TAG_HANDLER_MAP[t.tagName()]=t,this.TAG_ALIASES_MAP[t.tagName()]=t.tagName()},t.prototype.bbcode2html=function(n){for(var r=[],e=t.STATE_NORMAL,o="",u=0;u<n.length;u++){var a=n[u];switch(a){case"[":e===t.STATE_NORMAL&&u<n.length?(o.length>0&&(r.push({type:t.TYPE_TEXT,value:o.replace(/ /g,"&nbsp;")}),o=""),o="[","/"===n[u+1]?(e=t.STATE_BBCODE_CLOSE_START,o+="/",u++):e=t.STATE_BBCODE_OPEN_START):e===t.STATE_BBCODE_OPEN_START||e===t.STATE_BBCODE_CLOSE_START?o.length>0&&(r.push({type:t.TYPE_TEXT,value:o.replace(/ /g,"&nbsp;")}),o="["):o+=a;break;case"]":if(e===t.STATE_BBCODE_OPEN_START){var i="",p=o.indexOf(" ");p<=0&&(p=o.indexOf("=")),p>0&&(i=o.substring(p+1),o=o.substring(0,p)),r.push({type:t.TYPE_BBCODE_OPEN,value:o,arg:i.replace(/ /g,"&nbsp;")}),o="",e=t.STATE_NORMAL}else if(e===t.STATE_BBCODE_CLOSE_START){var c="",s=!1;t:for(;;){var l=r.pop();if(!l)break;switch(l.type){case t.TYPE_TEXT:c=l.value.replace(/ /g,"&nbsp;")+c;break;case t.TYPE_BBCODE_OPEN:if(l.value.substring(1)===o.substring(2)){r.push({type:t.TYPE_TEXT,value:this.transformTag(l.value,c,l.arg)}),c="",s=!0;break t}c=this.transformTag(l.value,c,l.arg)}}s||(c+=o+"]"),c.length>0&&r.push({type:t.TYPE_TEXT,value:c}),o="",e=t.STATE_NORMAL}else o+=a;break;case"\n":o+="<br/>";break;default:o+=a}}for(var f="",_=void 0;_=r.pop();)_.type===t.TYPE_BBCODE_OPEN?(o.length>0&&(f+=o,o=""),f=this.transformTag(_.value,f,_.arg)):_.type===t.TYPE_TEXT&&(f=_.value+f);return o.length>0&&(f+=o),f},t.STATE_NORMAL=0,t.STATE_BBCODE_OPEN_START=1,t.STATE_BBCODE_CLOSE_START=2,t.TYPE_TEXT=0,t.TYPE_BBCODE_OPEN=1,t}());T.registerTagHandler(new o),T.registerTagHandler(new a),T.registerTagHandler(new p),T.registerTagHandler(new s),T.registerTagHandler(new f),T.registerTagHandler(new y),t.g.bbcode2html=function(t){return T.bbcode2html(t)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,