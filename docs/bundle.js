(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var e=function(){function t(){}return t.prototype.tagName=function(){return"b"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},t}(),r=function(){function t(){}return t.prototype.tagName=function(){return"i"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},t}(),n=function(){function t(){}return t.prototype.tagName=function(){return"color"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return r?e?(e.match(/^[0-9a-fA-F]{6}$/)&&(e="#"+e),'<span style="color:'+e+'">'+r+"</span>"):r:""},t}(),a=function(){function t(){}return t.prototype.tagName=function(){return"mask"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return r?'<div class="mask">'+r+"</div>":""},t}(),o=function(){function t(){}return t.prototype.tagName=function(){return"collapse"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return e||(e="点击展开"),"<details><summary>"+e+"</summary>"+r+"</details>"},t}(),i=function(){function t(){}return t.prototype.tagName=function(){return"dice"},t.prototype.tagAliases=function(){return[]},t.prototype.handle=function(t,e,r){return r?!!r.match(/^((\d+)|(\d*d\d+))(\+((\d+)|(\d*d\d+)))*$/)&&'<div class="dice">假装有骰娘：'+r+"="+Math.round(200*Math.random())+"</div>":""},t}(),u=new(function(){function t(){this.TAG_HANDLER_MAP={},this.TAG_ALIASES_MAP={}}return t.prototype.transformAsIs=function(t,e,r){return"["+(e?t+"="+e:t)+"]"+r+"[/"+t+"]"},t.prototype.transformTag=function(t,e,r){null==e&&(e=""),t=t.substring(1);var n=this.TAG_ALIASES_MAP[t];if(!n)return this.transformAsIs(t,r,e);var a=this.TAG_HANDLER_MAP[n];if(a){var o=a.handle(n,r,e);if("string"==typeof o)return o}return this.transformAsIs(n,r,e)},t.prototype.filterXSS=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")},t.prototype.registerTagHandler=function(t){this.TAG_HANDLER_MAP[t.tagName()]=t,this.TAG_ALIASES_MAP[t.tagName()]=t.tagName()},t.prototype.bbcode2html=function(e){e=e.replace(/ /g,"&nbsp;");for(var r=[],n=t.STATE_NORMAL,a="",o=0;o<e.length;o++){var i=e[o];switch(i){case"[":n===t.STATE_NORMAL&&o<e.length?(a.length>0&&(r.push({type:t.TYPE_TEXT,value:a}),a=""),a="[","/"===e[o+1]?(n=t.STATE_BBCODE_CLOSE_START,a+="/",o++):n=t.STATE_BBCODE_OPEN_START):n===t.STATE_BBCODE_OPEN_START||n===t.STATE_BBCODE_CLOSE_START?a.length>0&&(r.push({type:t.TYPE_TEXT,value:a}),a="["):a+=i;break;case"]":if(n===t.STATE_BBCODE_OPEN_START){var u=void 0,s=a.indexOf("=");s>0&&(u=a.substring(s+1),a=a.substring(0,s)),r.push({type:t.TYPE_BBCODE_OPEN,value:a,arg:u}),a="",n=t.STATE_NORMAL}else if(n===t.STATE_BBCODE_CLOSE_START){var T="",p=!1;t:for(;;){var c=r.pop();if(!c)break;switch(c.type){case t.TYPE_TEXT:T=c.value+T;break;case t.TYPE_BBCODE_OPEN:if(c.value.substring(1)===a.substring(2)){r.push({type:t.TYPE_TEXT,value:this.transformTag(c.value,T,c.arg)}),T="",p=!0;break t}T=this.transformTag(c.value,T,c.arg)}}p||(T+=a+"]"),T.length>0&&r.push({type:t.TYPE_TEXT,value:T}),a="",n=t.STATE_NORMAL}else a+=i;break;case"\n":a+="<br/>";break;default:a+=i}}for(var l="",f=void 0;f=r.pop();)f.type===t.TYPE_BBCODE_OPEN?(a.length>0&&(l+=a,a=""),l=this.transformTag(f.value,l,f.arg)):f.type===t.TYPE_TEXT&&(l=f.value+l);return a.length>0&&(l+=a),l},t.STATE_NORMAL=0,t.STATE_BBCODE_OPEN_START=1,t.STATE_BBCODE_CLOSE_START=2,t.TYPE_TEXT=0,t.TYPE_BBCODE_OPEN=1,t}());u.registerTagHandler(new e),u.registerTagHandler(new r),u.registerTagHandler(new n),u.registerTagHandler(new a),u.registerTagHandler(new o),u.registerTagHandler(new i),t.g.bbcode2html=function(t){return u.bbcode2html(t)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,