(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var o,r=function(){function t(){this.TAG_HANDLER_MAP={},this.TAG_ALIASES_MAP={}}return t.prototype.transformAsIs=function(t,o,r){return"["+(o?t+"="+o:t)+"]"+r+"[/"+t+"]"},t.prototype.transformTag=function(t,o,r,e){null==o&&(o=""),t=t.substring(1);var n=this.TAG_ALIASES_MAP[t];if(!n)return this.transformAsIs(t,r,o);var i=this.TAG_HANDLER_MAP[n];if(i){var u=i.encodeToHtml(t,r,o,e);if("string"==typeof u)return u}return this.transformAsIs(t,r,o)},t.prototype.filterXSS=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")},t.prototype.registerTagHandler=function(t){this.TAG_HANDLER_MAP[t.tagName()]=t,this.TAG_ALIASES_MAP[t.tagName()]=t.tagName();for(var o=0,r=t.tagAliases();o<r.length;o++){var e=r[o];this.TAG_ALIASES_MAP[e]=t.tagName()}},t.prototype.getHandler=function(t){return t=this.TAG_ALIASES_MAP[t],this.TAG_HANDLER_MAP[t]},t.prototype.bbcode2html=function(o,r){void 0===r&&(r=!1);for(var e=[],n={},i=t.STATE_NORMAL,u="",c=0;c<o.length;c++){var a=o[c];switch(a){case"[":i===t.STATE_NORMAL&&c<o.length?(u.length>0&&(e.push({type:t.TYPE_TEXT,value:u.replace(/ /g,"&nbsp;")}),u=""),u="[","/"===o[c+1]?(i=t.STATE_BBCODE_CLOSE_START,u+="/",c++):i=t.STATE_BBCODE_OPEN_START):i===t.STATE_BBCODE_OPEN_START||i===t.STATE_BBCODE_CLOSE_START?u.length>0&&(e.push({type:t.TYPE_TEXT,value:u.replace(/ /g,"&nbsp;")}),u="["):u+=a;break;case"]":if(i===t.STATE_BBCODE_OPEN_START){var s="",p="",l=u.indexOf("=");l>0?(p=u.substring(l+1),s=u.substring(0,l)):s=u;var f=!1;if(g=this.getHandler(s.substring(1))){var y=g.allowParents(s.substring(1));if(y.length>0){for(var d=0,_=y;d<_.length;d++)if(n[_[d]]){f=!0;break}}else f=!0}if(f){if(g.isSelfClose())e.push({type:t.TYPE_TEXT,value:this.transformTag(s,"",p.replace(/ /g,"&nbsp;"),r)});else{e.push({type:t.TYPE_BBCODE_OPEN,value:s,arg:p.replace(/ /g,"&nbsp;")});var h=s.substring(1);n[h]=n[h]?n[h]+1:1}u=""}else u+="]";i=t.STATE_NORMAL}else if(i===t.STATE_BBCODE_CLOSE_START){var g;if(s=u.substring(2),(g=this.getHandler(s))&&!g.isSelfClose()){var T="",v=!1;t:for(;;){var m=e.pop();if(!m)break;switch(m.type){case t.TYPE_TEXT:T=m.value+T;break;case t.TYPE_BBCODE_OPEN:var O=m.value.substring(1);if(n[O]&&(n[O]=Math.max(n[O]-1,0)),s===O){e.push({type:t.TYPE_TEXT,value:this.transformTag(m.value,T,m.arg,r)}),T="",v=!0;break t}T=this.transformTag(m.value,T,m.arg,r)}}v||(T+=u+"]"),T.length>0&&e.push({type:t.TYPE_TEXT,value:T}),u="",i=t.STATE_NORMAL}else u+="]",i=t.STATE_NORMAL}else u+=a;break;case"\n":u+="<br/>";break;default:u+=a}}for(var A="",b=void 0;b=e.pop();)b.type===t.TYPE_BBCODE_OPEN?(u.length>0&&(A+=u,u=""),A=this.transformTag(b.value,A,b.arg,r)):b.type===t.TYPE_TEXT&&(A=b.value+A);return u.length>0&&(A+=u),console.log(A),A},t.prototype.html2bbcode=function(t){for(var o="",r=0,e=Array.from((new DOMParser).parseFromString(t,"text/html").getElementsByTagName("body")[0].childNodes);r<e.length;r++){var n=e[r];o+=this.resloveNode(n)}return o},t.prototype.resloveNode=function(t){var o="";Array.isArray(t)||(t=t instanceof NodeList||t instanceof HTMLCollection?Array.from(t):[t]);for(var r=0,e=t;r<e.length;r++){var n=e[r];switch(n.nodeType){case n.ELEMENT_NODE:var i=n;if("br"===i.tagName.toLowerCase()){o+="\n";break}var u=i.getAttribute("data-tag");u||(u=i.tagName.toLowerCase());var c=this.getHandler(u);o+=c?c.decodeFromHtml(i,this.resloveNode.bind(this)):this.resloveNode(Array.from(n.childNodes));break;case n.TEXT_NODE:o+=n.textContent.replace(/[\n\r ]/g,"")}}return o},t.STATE_NORMAL=0,t.STATE_BBCODE_OPEN_START=1,t.STATE_BBCODE_CLOSE_START=2,t.TYPE_TEXT=0,t.TYPE_BBCODE_OPEN=1,t}(),e=function(){function t(){}return t.prototype.isSelfClose=function(){return!1},t.prototype.allowParents=function(t){return[]},t.prototype.splitArgs=function(t){return t.split(";")},t}(),n=(o=function(t,r){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(t,r)},function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}o(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}),i=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return n(o,t),o.prototype.tagName=function(){return"b"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},o.prototype.decodeFromHtml=function(t,o){return"[b]"+o(t.childNodes)+"[/b]"},o}(e),u=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),c=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return u(o,t),o.prototype.tagName=function(){return"i"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},o.prototype.decodeFromHtml=function(t,o){return"[i]"+o(t.childNodes)+"[/i]"},o}(e),a=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),s=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return a(o,t),o.prototype.tagName=function(){return"color"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?o?(o.match(/^[0-9a-fA-F]{6}$/)&&(o="#"+o),'<font color="'+o+'" data-tag="color">'+r+"</font>"):r:""},o.prototype.decodeFromHtml=function(t,o){return"[color="+t.getAttribute("color")+"]"+o(t.childNodes)+"[/color]"},o}(e),p=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),l=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.prototype.tagName=function(){return"size"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?o&&o.match(/^[1-7]$/)?'<font size="'+o+'" data-tag="size">'+r+"</font>":r:""},o.prototype.decodeFromHtml=function(t,o){return"[size="+t.getAttribute("size")+"]"+o(t.childNodes)+"[/size]"},o}(e),f=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),y=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return f(o,t),o.prototype.tagName=function(){return"mask"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?'<div class="mask"><span class="heimu" title="你知道的太多了">'+r+"</span></div>":""},o.prototype.decodeFromHtml=function(t,o){return"[mask]"+o(t.childNodes)+"[/mask]"},o}(e),d=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),_=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return d(o,t),o.prototype.tagName=function(){return"collapse"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),o||(o="点击展开"),0===o.indexOf("title=")&&(o=o.substring(6)),e?'<div data-tag="collapse" class="collapse"><span>折叠标题：</span><div class="collapse-title">'+o+'</div><span>折叠内容：</span><div class="collapse-content">'+r+"</div></div>":'<div data-tag="collapse"><details><summary><b class="collapse-title">'+o+'</b></summary><div class="collapse-content">'+r+"</div></details></div>"},o.prototype.decodeFromHtml=function(t,o){var r=t.getElementsByClassName("collapse-title"),e=r.length>0?r[0].textContent:"点击展开",n=t.getElementsByClassName("collapse-content");return"[collapse="+e+"]"+(n.length>0?o(n[0]):"")+"[/collapse]"},o}(e),h=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),g=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return h(o,t),o.prototype.tagName=function(){return"dice"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?!!r.match(/^((\d+)|(\d*d\d+))(\+((\d+)|(\d*d\d+)))*$/)&&(e?'<div data-tag="dice" class="dice"><span><b>骰子ROLL点表达式：</b></span><div class="dice-expression">'+r+"</div></div>":'<div class="dice">假装有骰娘：'+r+"="+Math.round(200*Math.random())+"</div>"):""},o.prototype.decodeFromHtml=function(t,o){var r=t.getElementsByClassName("dice-expression"),e=r.length>0?r[0].textContent:"";return!!e&&"[dice]"+e+"[/dice]"},o}(e),T=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),v=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return T(o,t),o.prototype.tagName=function(){return"u"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},o.prototype.decodeFromHtml=function(t,o){return"[u]"+o(t.childNodes)+"[/u]"},o}(e),m=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),O=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return m(o,t),o.prototype.tagName=function(){return"s"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?"<"+this.tagName()+">"+r+"</"+this.tagName()+">":""},o.prototype.decodeFromHtml=function(t,o){return"[s]"+o(t.childNodes)+"[/s]"},o}(e),A=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),b=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return A(o,t),o.prototype.tagName=function(){return"img"},o.prototype.tagAliases=function(){return[]},o.prototype.isSelfClose=function(){return!0},o.prototype.encodeToHtml=function(t,o,r,e){void 0===e&&(e=!1);var n=this.splitArgs(o);return n[0],n.length>1&&n[1],n.length>2&&n[2],n.length>3&&n[3],n.length>4&&n[4],n.length>5&&n[5],"<"+this.tagName()+' src="'+o+'"/>'},o.prototype.decodeFromHtml=function(t,o){return"[img="+t.getAttribute("src")+"]"},o}(e),w=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),E=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return w(o,t),o.prototype.tagName=function(){return"hr"},o.prototype.tagAliases=function(){return[]},o.prototype.isSelfClose=function(){return!0},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),"<hr/>"},o.prototype.decodeFromHtml=function(t,o){return"[hr]"},o}(e),N=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),P=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return N(o,t),o.prototype.tagName=function(){return"url"},o.prototype.tagAliases=function(){return[]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?(o?o.match(/^((https|http):\/\/)[^\s]+$/)||(o="http://"+o):o="#",'<a href="'+o+'" data-tag="url">'+r+"</a>"):""},o.prototype.decodeFromHtml=function(t,o){return"[url="+t.getAttribute("href")+"]"+t.textContent+"[/url]"},o}(e),S=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),H=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return S(o,t),o.prototype.tagName=function(){return"quote"},o.prototype.tagAliases=function(){return["blockquote"]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r?'<blockquote data-tag="quote"><p>'+r+"</p></blockquote>":""},o.prototype.decodeFromHtml=function(t,o){return"[quote]"+o(t.childNodes)+"[/quote]"},o}(e),C=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),j=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return C(o,t),o.prototype.tagName=function(){return"h1"},o.prototype.tagAliases=function(){return["h2","h3"]},o.prototype.encodeToHtml=function(t,o,r,e){return void 0===e&&(e=!1),r&&0!==r.trim().length?"<"+(t=t.toLowerCase())+">"+r+"</"+t+">":""},o.prototype.decodeFromHtml=function(t,o){var r=t.tagName.toLowerCase();return"["+r+"]"+o(t.childNodes)+"[/"+r+"]"},o}(e),B=function(){var t=function(o,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])})(o,r)};return function(o,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=o}t(o,r),o.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),L=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return B(o,t),o.prototype.tagName=function(){return"list"},o.prototype.tagAliases=function(){return["ul","ol","li","*"]},o.prototype.allowParents=function(t){return"*"===t?["list"]:[]},o.prototype.encodeToHtml=function(t,o,r,e){if(void 0===e&&(e=!1),!r)return"";var n="";switch(t){case"list":n=o?"ol":"ul";break;case"*":n="li";break;default:return r}return"<"+n+">"+r+"</"+n+">"},o.prototype.decodeFromHtml=function(t,o){switch(t.tagName.toLowerCase()){case"ul":return"[list]"+o(t.childNodes)+"[/list]";case"ol":return"[list=1]"+o(t.childNodes)+"[/list]";case"li":return"[*]"+o(t.childNodes);default:return!1}},o}(e),x=new r;x.registerTagHandler(new i),x.registerTagHandler(new c),x.registerTagHandler(new v),x.registerTagHandler(new O),x.registerTagHandler(new s),x.registerTagHandler(new l),x.registerTagHandler(new y),x.registerTagHandler(new _),x.registerTagHandler(new g),x.registerTagHandler(new b),x.registerTagHandler(new E),x.registerTagHandler(new P),x.registerTagHandler(new H),x.registerTagHandler(new j),x.registerTagHandler(new L),t.g.BBCODE={newParser:function(){return new r},defaultParser:x,bbcode2html:function(t,o){return void 0===o&&(o=!1),x.bbcode2html(t,o)},html2bbcode:function(t){return x.html2bbcode(t)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,