(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var r,e=function(){function t(){this.TAG_HANDLER_MAP={},this.TAG_ALIASES_MAP={}}return t.prototype.transformAsIs=function(t,r,e){return"["+(r?t+"="+r:t)+"]"+e+"[/"+t+"]"},t.prototype.transformTag=function(t,r,e){null==r&&(r=""),t=t.substring(1);var n=this.TAG_ALIASES_MAP[t];if(!n)return this.transformAsIs(t,e,r);var o=this.TAG_HANDLER_MAP[n];if(o){var i=o.encodeToHtml(n,e,r);if("string"==typeof i)return i}return this.transformAsIs(n,e,r)},t.prototype.filterXSS=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")},t.prototype.registerTagHandler=function(t){this.TAG_HANDLER_MAP[t.tagName()]=t,this.TAG_ALIASES_MAP[t.tagName()]=t.tagName()},t.prototype.getHandler=function(t){return t=this.TAG_ALIASES_MAP[t],this.TAG_HANDLER_MAP[t]},t.prototype.bbcode2html=function(r){for(var e=[],n=t.STATE_NORMAL,o="",i=0;i<r.length;i++){var u=r[i];switch(u){case"[":n===t.STATE_NORMAL&&i<r.length?(o.length>0&&(e.push({type:t.TYPE_TEXT,value:o.replace(/ /g,"&nbsp;")}),o=""),o="[","/"===r[i+1]?(n=t.STATE_BBCODE_CLOSE_START,o+="/",i++):n=t.STATE_BBCODE_OPEN_START):n===t.STATE_BBCODE_OPEN_START||n===t.STATE_BBCODE_CLOSE_START?o.length>0&&(e.push({type:t.TYPE_TEXT,value:o.replace(/ /g,"&nbsp;")}),o="["):o+=u;break;case"]":if(n===t.STATE_BBCODE_OPEN_START){var c="",a="",p=o.indexOf("=");p>0?(a=o.substring(p+1),c=o.substring(0,p)):c=o,(s=this.getHandler(c.substring(1)))?(s.isSelfClose()?e.push({type:t.TYPE_TEXT,value:this.transformTag(c,"",a.replace(/ /g,"&nbsp;"))}):e.push({type:t.TYPE_BBCODE_OPEN,value:c,arg:a.replace(/ /g,"&nbsp;")}),o=""):o+="]",n=t.STATE_NORMAL}else if(n===t.STATE_BBCODE_CLOSE_START){var s;if(c=o.substring(2),(s=this.getHandler(c))&&!s.isSelfClose()){var l="",f=!1;t:for(;;){var y=e.pop();if(!y)break;switch(y.type){case t.TYPE_TEXT:l=y.value+l;break;case t.TYPE_BBCODE_OPEN:if(y.value.substring(1)===o.substring(2)){e.push({type:t.TYPE_TEXT,value:this.transformTag(y.value,l,y.arg)}),l="",f=!0;break t}l=this.transformTag(y.value,l,y.arg)}}f||(l+=o+"]"),l.length>0&&e.push({type:t.TYPE_TEXT,value:l}),o="",n=t.STATE_NORMAL}else o+="]",n=t.STATE_NORMAL}else o+=u;break;case"\n":o+="<br/>";break;default:o+=u}}for(var _="",h=void 0;h=e.pop();)h.type===t.TYPE_BBCODE_OPEN?(o.length>0&&(_+=o,o=""),_=this.transformTag(h.value,_,h.arg)):h.type===t.TYPE_TEXT&&(_=h.value+_);return o.length>0&&(_+=o),console.log(_),_},t.prototype.html2bbcode=function(t){for(var r="",e=0,n=Array.from((new DOMParser).parseFromString(t,"text/html").getElementsByTagName("body")[0].childNodes);e<n.length;e++){var o=n[e];r+=this.resloveNode(o)}return r},t.prototype.resloveNode=function(t){var r="";Array.isArray(t)||(t=t instanceof NodeList||t instanceof HTMLCollection?Array.from(t):[t]);for(var e=0,n=t;e<n.length;e++){var o=n[e];switch(o.nodeType){case o.ELEMENT_NODE:var i=o;if("br"===i.tagName.toLowerCase()){r+="\n";break}var u=i.getAttribute("data-bbcode-tag");u||(u=i.tagName.toLowerCase());var c=this.getHandler(u);r+=c?c.decodeFromHtml(i,this.resloveNode.bind(this)):this.resloveNode(Array.from(o.childNodes));break;case o.TEXT_NODE:r+=o.textContent.replace(/[\n\r ]/g,"")}}return r},t.STATE_NORMAL=0,t.STATE_BBCODE_OPEN_START=1,t.STATE_BBCODE_CLOSE_START=2,t.TYPE_TEXT=0,t.TYPE_BBCODE_OPEN=1,t}(),n=function(){function t(){}return t.prototype.isSelfClose=function(){return!1},t.prototype.splitArgs=function(t){return t.split(";")},t}(),o=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return o(r,t),r.prototype.tagName=function(){return"b"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?"<"+this.tagName()+">"+e+"</"+this.tagName()+">":""},r.prototype.decodeFromHtml=function(t,r){return"[b]"+r(t.childNodes)+"[/b]"},r}(n),u=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),c=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return u(r,t),r.prototype.tagName=function(){return"i"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?"<"+this.tagName()+">"+e+"</"+this.tagName()+">":""},r.prototype.decodeFromHtml=function(t,r){return"[i]"+r(t.childNodes)+"[/i]"},r}(n),a=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),p=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return a(r,t),r.prototype.tagName=function(){return"color"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?r?(r.match(/^[0-9a-fA-F]{6}$/)&&(r="#"+r),'<div style="color:'+r+';display: inline-block">'+e+"</div>"):e:""},r.prototype.decodeFromHtml=function(t,r){return"[color="+t.getAttribute("data-bbcode-color")+"]"+r(t.childNodes)+"[/color]"},r}(n),s=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),l=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return s(r,t),r.prototype.tagName=function(){return"mask"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?'<div class="mask"><span class="heimu" title="你知道的太多了">'+e+"</span></div>":""},r.prototype.decodeFromHtml=function(t,r){return"[mask]"+r(t.childNodes)+"[/mask]"},r}(n),f=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),y=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return f(r,t),r.prototype.tagName=function(){return"collapse"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return r||(r="点击展开"),0===r.indexOf("title=")&&(r=r.substring(6)),"<div><details><summary><b>"+r+"</b></summary><p>"+e+"</p></details></div>"},r.prototype.decodeFromHtml=function(t,r){return"[collapse]"+r(t.getElementsByClassName("collapse-content"))+"[/collapse]"},r}(n),_=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),h=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return _(r,t),r.prototype.tagName=function(){return"dice"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?!!e.match(/^((\d+)|(\d*d\d+))(\+((\d+)|(\d*d\d+)))*$/)&&'<div class="dice">假装有骰娘：'+e+"="+Math.round(200*Math.random())+"</div>":""},r.prototype.decodeFromHtml=function(t,r){return"DICE TODO"},r}(n),g=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),T=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return g(r,t),r.prototype.tagName=function(){return"u"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?"<"+this.tagName()+">"+e+"</"+this.tagName()+">":""},r.prototype.decodeFromHtml=function(t,r){return"[u]"+r(t.childNodes)+"[/u]"},r}(n),d=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),m=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return d(r,t),r.prototype.tagName=function(){return"s"},r.prototype.tagAliases=function(){return[]},r.prototype.encodeToHtml=function(t,r,e){return e?"<"+this.tagName()+">"+e+"</"+this.tagName()+">":""},r.prototype.decodeFromHtml=function(t,r){return"[s]"+r(t.childNodes)+"[/s]"},r}(n),A=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),O=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return A(r,t),r.prototype.tagName=function(){return"img"},r.prototype.tagAliases=function(){return[]},r.prototype.isSelfClose=function(){return!0},r.prototype.encodeToHtml=function(t,r,e){var n=this.splitArgs(r);return n[0],n.length>1&&n[1],n.length>2&&n[2],n.length>3&&n[3],n.length>4&&n[4],n.length>5&&n[5],"<"+this.tagName()+' src="'+r+'"/>'},r.prototype.decodeFromHtml=function(t,r){return"[img="+t.getAttribute("src")+"]"},r}(n),E=function(){var t=function(r,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])})(r,e)};return function(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),b=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return E(r,t),r.prototype.tagName=function(){return"hr"},r.prototype.tagAliases=function(){return[]},r.prototype.isSelfClose=function(){return!0},r.prototype.encodeToHtml=function(t,r,e){return"<hr/>"},r.prototype.decodeFromHtml=function(t,r){return"[hr]"},r}(n),v=new e;v.registerTagHandler(new i),v.registerTagHandler(new c),v.registerTagHandler(new T),v.registerTagHandler(new m),v.registerTagHandler(new p),v.registerTagHandler(new l),v.registerTagHandler(new y),v.registerTagHandler(new h),v.registerTagHandler(new O),v.registerTagHandler(new b),t.g.BBCODE={newParser:function(){return new e},defaultParser:v,bbcode2html:function(t){return v.bbcode2html(t)},html2bbcode:function(t){return v.html2bbcode(t)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,